// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  Addr,
  OwnerUpdate,
  MigrateV1ToV2,
  WhitelistEntry,
  QueryMsg,
  ArrayOfActiveEmission,
  ActiveEmission,
  ConfigResponse,
  ArrayOfEmissionResponse,
  EmissionResponse,
  Decimal,
  IncentiveStateResponse,
  ArrayOfIncentiveStateResponse,
  ArrayOfCoin,
  Coin,
  ArrayOfWhitelistEntry,
} from './FuryIncentives.types'
import { FuryIncentivesQueryClient, FuryIncentivesClient } from './FuryIncentives.client'
export const furyIncentivesQueryKeys = {
  contract: [
    {
      contract: 'furyIncentives',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furyIncentivesQueryKeys.contract[0], address: contractAddress }] as const,
  activeEmissions: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'active_emissions', args },
    ] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  incentiveState: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'incentive_state', args },
    ] as const,
  incentiveStates: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'incentive_states', args },
    ] as const,
  emission: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'emission', args }] as const,
  emissions: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'emissions', args },
    ] as const,
  userUnclaimedRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyIncentivesQueryKeys.address(contractAddress)[0],
        method: 'user_unclaimed_rewards',
        args,
      },
    ] as const,
  whitelist: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyIncentivesQueryKeys.address(contractAddress)[0], method: 'whitelist', args },
    ] as const,
}
export interface FuryIncentivesReactQuery<TResponse, TData = TResponse> {
  client: FuryIncentivesQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FuryIncentivesWhitelistQuery<TData>
  extends FuryIncentivesReactQuery<ArrayOfWhitelistEntry, TData> {}
export function useFuryIncentivesWhitelistQuery<TData = ArrayOfWhitelistEntry>({
  client,
  options,
}: FuryIncentivesWhitelistQuery<TData>) {
  return useQuery<ArrayOfWhitelistEntry, Error, TData>(
    furyIncentivesQueryKeys.whitelist(client?.contractAddress),
    () => (client ? client.whitelist() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesUserUnclaimedRewardsQuery<TData>
  extends FuryIncentivesReactQuery<ArrayOfCoin, TData> {
  args: {
    accountId?: string
    limit?: number
    startAfterCollateralDenom?: string
    startAfterIncentiveDenom?: string
    user: string
  }
}
export function useFuryIncentivesUserUnclaimedRewardsQuery<TData = ArrayOfCoin>({
  client,
  args,
  options,
}: FuryIncentivesUserUnclaimedRewardsQuery<TData>) {
  return useQuery<ArrayOfCoin, Error, TData>(
    furyIncentivesQueryKeys.userUnclaimedRewards(client?.contractAddress, args),
    () =>
      client
        ? client.userUnclaimedRewards({
            accountId: args.accountId,
            limit: args.limit,
            startAfterCollateralDenom: args.startAfterCollateralDenom,
            startAfterIncentiveDenom: args.startAfterIncentiveDenom,
            user: args.user,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesEmissionsQuery<TData>
  extends FuryIncentivesReactQuery<ArrayOfEmissionResponse, TData> {
  args: {
    collateralDenom: string
    incentiveDenom: string
    limit?: number
    startAfterTimestamp?: number
  }
}
export function useFuryIncentivesEmissionsQuery<TData = ArrayOfEmissionResponse>({
  client,
  args,
  options,
}: FuryIncentivesEmissionsQuery<TData>) {
  return useQuery<ArrayOfEmissionResponse, Error, TData>(
    furyIncentivesQueryKeys.emissions(client?.contractAddress, args),
    () =>
      client
        ? client.emissions({
            collateralDenom: args.collateralDenom,
            incentiveDenom: args.incentiveDenom,
            limit: args.limit,
            startAfterTimestamp: args.startAfterTimestamp,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesEmissionQuery<TData>
  extends FuryIncentivesReactQuery<Uint128, TData> {
  args: {
    collateralDenom: string
    incentiveDenom: string
    timestamp: number
  }
}
export function useFuryIncentivesEmissionQuery<TData = Uint128>({
  client,
  args,
  options,
}: FuryIncentivesEmissionQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyIncentivesQueryKeys.emission(client?.contractAddress, args),
    () =>
      client
        ? client.emission({
            collateralDenom: args.collateralDenom,
            incentiveDenom: args.incentiveDenom,
            timestamp: args.timestamp,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesIncentiveStatesQuery<TData>
  extends FuryIncentivesReactQuery<ArrayOfIncentiveStateResponse, TData> {
  args: {
    limit?: number
    startAfterCollateralDenom?: string
    startAfterIncentiveDenom?: string
  }
}
export function useFuryIncentivesIncentiveStatesQuery<TData = ArrayOfIncentiveStateResponse>({
  client,
  args,
  options,
}: FuryIncentivesIncentiveStatesQuery<TData>) {
  return useQuery<ArrayOfIncentiveStateResponse, Error, TData>(
    furyIncentivesQueryKeys.incentiveStates(client?.contractAddress, args),
    () =>
      client
        ? client.incentiveStates({
            limit: args.limit,
            startAfterCollateralDenom: args.startAfterCollateralDenom,
            startAfterIncentiveDenom: args.startAfterIncentiveDenom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesIncentiveStateQuery<TData>
  extends FuryIncentivesReactQuery<IncentiveStateResponse, TData> {
  args: {
    collateralDenom: string
    incentiveDenom: string
  }
}
export function useFuryIncentivesIncentiveStateQuery<TData = IncentiveStateResponse>({
  client,
  args,
  options,
}: FuryIncentivesIncentiveStateQuery<TData>) {
  return useQuery<IncentiveStateResponse, Error, TData>(
    furyIncentivesQueryKeys.incentiveState(client?.contractAddress, args),
    () =>
      client
        ? client.incentiveState({
            collateralDenom: args.collateralDenom,
            incentiveDenom: args.incentiveDenom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesConfigQuery<TData>
  extends FuryIncentivesReactQuery<ConfigResponse, TData> {}
export function useFuryIncentivesConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: FuryIncentivesConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    furyIncentivesQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesActiveEmissionsQuery<TData>
  extends FuryIncentivesReactQuery<ArrayOfActiveEmission, TData> {
  args: {
    collateralDenom: string
  }
}
export function useFuryIncentivesActiveEmissionsQuery<TData = ArrayOfActiveEmission>({
  client,
  args,
  options,
}: FuryIncentivesActiveEmissionsQuery<TData>) {
  return useQuery<ArrayOfActiveEmission, Error, TData>(
    furyIncentivesQueryKeys.activeEmissions(client?.contractAddress, args),
    () =>
      client
        ? client.activeEmissions({
            collateralDenom: args.collateralDenom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryIncentivesMigrateMutation {
  client: FuryIncentivesClient
  msg: MigrateV1ToV2
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesMigrateMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesMigrateMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesMigrateMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.migrate(msg, fee, memo, funds),
    options,
  )
}
export interface FuryIncentivesUpdateOwnerMutation {
  client: FuryIncentivesClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
export interface FuryIncentivesUpdateConfigMutation {
  client: FuryIncentivesClient
  msg: {
    addressProvider?: string
    maxWhitelistedDenoms?: number
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface FuryIncentivesClaimRewardsMutation {
  client: FuryIncentivesClient
  msg: {
    accountId?: string
    limit?: number
    startAfterCollateralDenom?: string
    startAfterIncentiveDenom?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesClaimRewardsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesClaimRewardsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesClaimRewardsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.claimRewards(msg, fee, memo, funds),
    options,
  )
}
export interface FuryIncentivesBalanceChangeMutation {
  client: FuryIncentivesClient
  msg: {
    accountId?: string
    denom: string
    totalAmountScaledBefore: Uint128
    userAddr: Addr
    userAmountScaledBefore: Uint128
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesBalanceChangeMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesBalanceChangeMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesBalanceChangeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.balanceChange(msg, fee, memo, funds),
    options,
  )
}
export interface FuryIncentivesSetAssetIncentiveMutation {
  client: FuryIncentivesClient
  msg: {
    collateralDenom: string
    duration: number
    emissionPerSecond: Uint128
    incentiveDenom: string
    startTime: number
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesSetAssetIncentiveMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesSetAssetIncentiveMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesSetAssetIncentiveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setAssetIncentive(msg, fee, memo, funds),
    options,
  )
}
export interface FuryIncentivesUpdateWhitelistMutation {
  client: FuryIncentivesClient
  msg: {
    addDenoms: WhitelistEntry[]
    removeDenoms: string[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryIncentivesUpdateWhitelistMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryIncentivesUpdateWhitelistMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryIncentivesUpdateWhitelistMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateWhitelist(msg, fee, memo, funds),
    options,
  )
}
