// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Uint128,
  InstantiateMsg,
  ExecuteMsg,
  MigrateV1ToV2,
  Binary,
  Expiration,
  Timestamp,
  Uint64,
  Action,
  NftConfigUpdates,
  QueryMsg,
  AllNftInfoResponseForEmpty,
  OwnerOfResponse,
  Approval,
  NftInfoResponseForEmpty,
  Empty,
  OperatorsResponse,
  TokensResponse,
  ApprovalResponse,
  ApprovalsResponse,
  NftConfigBaseForString,
  ContractInfoResponse,
  MinterResponse,
  String,
  NumTokensResponse,
  Addr,
  OwnershipForAddr,
} from './FuryAccountNft.types'
import { FuryAccountNftQueryClient, FuryAccountNftClient } from './FuryAccountNft.client'
export const furyAccountNftQueryKeys = {
  contract: [
    {
      contract: 'furyAccountNft',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furyAccountNftQueryKeys.contract[0], address: contractAddress }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  nextId: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'next_id', args }] as const,
  ownerOf: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'owner_of', args }] as const,
  approval: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'approval', args }] as const,
  approvals: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'approvals', args },
    ] as const,
  allOperators: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'all_operators', args },
    ] as const,
  numTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'num_tokens', args },
    ] as const,
  contractInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'contract_info', args },
    ] as const,
  nftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'nft_info', args }] as const,
  allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'all_nft_info', args },
    ] as const,
  tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'tokens', args }] as const,
  allTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'all_tokens', args },
    ] as const,
  minter: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'minter', args }] as const,
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyAccountNftQueryKeys.address(contractAddress)[0], method: 'ownership', args },
    ] as const,
}
export interface FuryAccountNftReactQuery<TResponse, TData = TResponse> {
  client: FuryAccountNftQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FuryAccountNftOwnershipQuery<TData>
  extends FuryAccountNftReactQuery<OwnershipForAddr, TData> {}
export function useFuryAccountNftOwnershipQuery<TData = OwnershipForAddr>({
  client,
  options,
}: FuryAccountNftOwnershipQuery<TData>) {
  return useQuery<OwnershipForAddr, Error, TData>(
    furyAccountNftQueryKeys.ownership(client?.contractAddress),
    () => (client ? client.ownership() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftMinterQuery<TData>
  extends FuryAccountNftReactQuery<MinterResponse, TData> {}
export function useFuryAccountNftMinterQuery<TData = MinterResponse>({
  client,
  options,
}: FuryAccountNftMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(
    furyAccountNftQueryKeys.minter(client?.contractAddress),
    () => (client ? client.minter() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftAllTokensQuery<TData>
  extends FuryAccountNftReactQuery<TokensResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useFuryAccountNftAllTokensQuery<TData = TokensResponse>({
  client,
  args,
  options,
}: FuryAccountNftAllTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(
    furyAccountNftQueryKeys.allTokens(client?.contractAddress, args),
    () =>
      client
        ? client.allTokens({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftTokensQuery<TData>
  extends FuryAccountNftReactQuery<TokensResponse, TData> {
  args: {
    limit?: number
    owner: string
    startAfter?: string
  }
}
export function useFuryAccountNftTokensQuery<TData = TokensResponse>({
  client,
  args,
  options,
}: FuryAccountNftTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(
    furyAccountNftQueryKeys.tokens(client?.contractAddress, args),
    () =>
      client
        ? client.tokens({
            limit: args.limit,
            owner: args.owner,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftAllNftInfoQuery<TData>
  extends FuryAccountNftReactQuery<AllNftInfoResponseForEmpty, TData> {
  args: {
    includeExpired?: boolean
    tokenId: string
  }
}
export function useFuryAccountNftAllNftInfoQuery<TData = AllNftInfoResponseForEmpty>({
  client,
  args,
  options,
}: FuryAccountNftAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponseForEmpty, Error, TData>(
    furyAccountNftQueryKeys.allNftInfo(client?.contractAddress, args),
    () =>
      client
        ? client.allNftInfo({
            includeExpired: args.includeExpired,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftNftInfoQuery<TData>
  extends FuryAccountNftReactQuery<NftInfoResponseForEmpty, TData> {
  args: {
    tokenId: string
  }
}
export function useFuryAccountNftNftInfoQuery<TData = NftInfoResponseForEmpty>({
  client,
  args,
  options,
}: FuryAccountNftNftInfoQuery<TData>) {
  return useQuery<NftInfoResponseForEmpty, Error, TData>(
    furyAccountNftQueryKeys.nftInfo(client?.contractAddress, args),
    () =>
      client
        ? client.nftInfo({
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftContractInfoQuery<TData>
  extends FuryAccountNftReactQuery<ContractInfoResponse, TData> {}
export function useFuryAccountNftContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options,
}: FuryAccountNftContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(
    furyAccountNftQueryKeys.contractInfo(client?.contractAddress),
    () => (client ? client.contractInfo() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftNumTokensQuery<TData>
  extends FuryAccountNftReactQuery<NumTokensResponse, TData> {}
export function useFuryAccountNftNumTokensQuery<TData = NumTokensResponse>({
  client,
  options,
}: FuryAccountNftNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(
    furyAccountNftQueryKeys.numTokens(client?.contractAddress),
    () => (client ? client.numTokens() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftAllOperatorsQuery<TData>
  extends FuryAccountNftReactQuery<OperatorsResponse, TData> {
  args: {
    includeExpired?: boolean
    limit?: number
    owner: string
    startAfter?: string
  }
}
export function useFuryAccountNftAllOperatorsQuery<TData = OperatorsResponse>({
  client,
  args,
  options,
}: FuryAccountNftAllOperatorsQuery<TData>) {
  return useQuery<OperatorsResponse, Error, TData>(
    furyAccountNftQueryKeys.allOperators(client?.contractAddress, args),
    () =>
      client
        ? client.allOperators({
            includeExpired: args.includeExpired,
            limit: args.limit,
            owner: args.owner,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftApprovalsQuery<TData>
  extends FuryAccountNftReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean
    tokenId: string
  }
}
export function useFuryAccountNftApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options,
}: FuryAccountNftApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(
    furyAccountNftQueryKeys.approvals(client?.contractAddress, args),
    () =>
      client
        ? client.approvals({
            includeExpired: args.includeExpired,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftApprovalQuery<TData>
  extends FuryAccountNftReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean
    spender: string
    tokenId: string
  }
}
export function useFuryAccountNftApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options,
}: FuryAccountNftApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(
    furyAccountNftQueryKeys.approval(client?.contractAddress, args),
    () =>
      client
        ? client.approval({
            includeExpired: args.includeExpired,
            spender: args.spender,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftOwnerOfQuery<TData>
  extends FuryAccountNftReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean
    tokenId: string
  }
}
export function useFuryAccountNftOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options,
}: FuryAccountNftOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(
    furyAccountNftQueryKeys.ownerOf(client?.contractAddress, args),
    () =>
      client
        ? client.ownerOf({
            includeExpired: args.includeExpired,
            tokenId: args.tokenId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftNextIdQuery<TData> extends FuryAccountNftReactQuery<String, TData> {}
export function useFuryAccountNftNextIdQuery<TData = String>({
  client,
  options,
}: FuryAccountNftNextIdQuery<TData>) {
  return useQuery<String, Error, TData>(
    furyAccountNftQueryKeys.nextId(client?.contractAddress),
    () => (client ? client.nextId() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftConfigQuery<TData>
  extends FuryAccountNftReactQuery<NftConfigBaseForString, TData> {}
export function useFuryAccountNftConfigQuery<TData = NftConfigBaseForString>({
  client,
  options,
}: FuryAccountNftConfigQuery<TData>) {
  return useQuery<NftConfigBaseForString, Error, TData>(
    furyAccountNftQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryAccountNftUpdateOwnershipMutation {
  client: FuryAccountNftClient
  msg: Action
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftUpdateOwnershipMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftUpdateOwnershipMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftUpdateOwnershipMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateOwnership(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftRevokeAllMutation {
  client: FuryAccountNftClient
  msg: {
    operator: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftRevokeAllMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftRevokeAllMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftRevokeAllMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.revokeAll(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftApproveAllMutation {
  client: FuryAccountNftClient
  msg: {
    expires?: Expiration
    operator: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftApproveAllMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftApproveAllMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftApproveAllMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.approveAll(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftRevokeMutation {
  client: FuryAccountNftClient
  msg: {
    spender: string
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftRevokeMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftRevokeMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftRevokeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.revoke(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftApproveMutation {
  client: FuryAccountNftClient
  msg: {
    expires?: Expiration
    spender: string
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftApproveMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftApproveMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftApproveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.approve(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftSendNftMutation {
  client: FuryAccountNftClient
  msg: {
    contract: string
    msg: Binary
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftSendNftMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftSendNftMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftSendNftMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.sendNft(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftTransferNftMutation {
  client: FuryAccountNftClient
  msg: {
    recipient: string
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftTransferNftMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftTransferNftMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftTransferNftMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.transferNft(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftMigrateMutation {
  client: FuryAccountNftClient
  msg: MigrateV1ToV2
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftMigrateMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftMigrateMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftMigrateMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.migrate(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftBurnMutation {
  client: FuryAccountNftClient
  msg: {
    tokenId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftBurnMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftBurnMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftBurnMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.burn(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftMintMutation {
  client: FuryAccountNftClient
  msg: {
    user: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftMintMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftMintMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftMintMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.mint(msg, fee, memo, funds),
    options,
  )
}
export interface FuryAccountNftUpdateConfigMutation {
  client: FuryAccountNftClient
  msg: {
    updates: NftConfigUpdates
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryAccountNftUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryAccountNftUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryAccountNftUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
