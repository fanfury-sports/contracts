// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  QueryMsg,
  ActionKind,
  AccountKind,
  ConfigResponse,
  OwnerResponse,
  HealthState,
  Decimal,
  Uint128,
  HealthValuesResponse,
} from './FuryRoverHealth.types'
import { FuryRoverHealthQueryClient, FuryRoverHealthClient } from './FuryRoverHealth.client'
export const marsRoverHealthQueryKeys = {
  contract: [
    {
      contract: 'marsRoverHealth',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...marsRoverHealthQueryKeys.contract[0], address: contractAddress }] as const,
  healthValues: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsRoverHealthQueryKeys.address(contractAddress)[0], method: 'health_values', args },
    ] as const,
  healthState: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...marsRoverHealthQueryKeys.address(contractAddress)[0], method: 'health_state', args },
    ] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...marsRoverHealthQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
}
export interface FuryRoverHealthReactQuery<TResponse, TData = TResponse> {
  client: FuryRoverHealthQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FuryRoverHealthConfigQuery<TData>
  extends FuryRoverHealthReactQuery<ConfigResponse, TData> {}
export function useFuryRoverHealthConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: FuryRoverHealthConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    marsRoverHealthQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryRoverHealthHealthStateQuery<TData>
  extends FuryRoverHealthReactQuery<HealthState, TData> {
  args: {
    accountId: string
    action: ActionKind
    kind: AccountKind
  }
}
export function useFuryRoverHealthHealthStateQuery<TData = HealthState>({
  client,
  args,
  options,
}: FuryRoverHealthHealthStateQuery<TData>) {
  return useQuery<HealthState, Error, TData>(
    marsRoverHealthQueryKeys.healthState(client?.contractAddress, args),
    () =>
      client
        ? client.healthState({
            accountId: args.accountId,
            action: args.action,
            kind: args.kind,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryRoverHealthHealthValuesQuery<TData>
  extends FuryRoverHealthReactQuery<HealthValuesResponse, TData> {
  args: {
    accountId: string
    action: ActionKind
    kind: AccountKind
  }
}
export function useFuryRoverHealthHealthValuesQuery<TData = HealthValuesResponse>({
  client,
  args,
  options,
}: FuryRoverHealthHealthValuesQuery<TData>) {
  return useQuery<HealthValuesResponse, Error, TData>(
    marsRoverHealthQueryKeys.healthValues(client?.contractAddress, args),
    () =>
      client
        ? client.healthValues({
            accountId: args.accountId,
            action: args.action,
            kind: args.kind,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryRoverHealthUpdateConfigMutation {
  client: FuryRoverHealthClient
  msg: {
    creditManager: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryRoverHealthUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryRoverHealthUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryRoverHealthUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface FuryRoverHealthUpdateOwnerMutation {
  client: FuryRoverHealthClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryRoverHealthUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryRoverHealthUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryRoverHealthUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
