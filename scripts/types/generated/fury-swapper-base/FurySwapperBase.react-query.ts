// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  Uint128,
  Decimal,
  Addr,
  Empty,
  Coin,
  QueryMsg,
  EstimateExactInSwapResponse,
  OwnerResponse,
  RouteResponseForEmpty,
  ArrayOfRouteResponseForEmpty,
} from './FurySwapperBase.types'
import { FurySwapperBaseQueryClient, FurySwapperBaseClient } from './FurySwapperBase.client'
export const furySwapperBaseQueryKeys = {
  contract: [
    {
      contract: 'furySwapperBase',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furySwapperBaseQueryKeys.contract[0], address: contractAddress }] as const,
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furySwapperBaseQueryKeys.address(contractAddress)[0], method: 'owner', args }] as const,
  route: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furySwapperBaseQueryKeys.address(contractAddress)[0], method: 'route', args }] as const,
  routes: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furySwapperBaseQueryKeys.address(contractAddress)[0], method: 'routes', args }] as const,
  estimateExactInSwap: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furySwapperBaseQueryKeys.address(contractAddress)[0],
        method: 'estimate_exact_in_swap',
        args,
      },
    ] as const,
}
export interface FurySwapperBaseReactQuery<TResponse, TData = TResponse> {
  client: FurySwapperBaseQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FurySwapperBaseEstimateExactInSwapQuery<TData>
  extends FurySwapperBaseReactQuery<EstimateExactInSwapResponse, TData> {
  args: {
    coinIn: Coin
    denomOut: string
  }
}
export function useFurySwapperBaseEstimateExactInSwapQuery<TData = EstimateExactInSwapResponse>({
  client,
  args,
  options,
}: FurySwapperBaseEstimateExactInSwapQuery<TData>) {
  return useQuery<EstimateExactInSwapResponse, Error, TData>(
    furySwapperBaseQueryKeys.estimateExactInSwap(client?.contractAddress, args),
    () =>
      client
        ? client.estimateExactInSwap({
            coinIn: args.coinIn,
            denomOut: args.denomOut,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperBaseRoutesQuery<TData>
  extends FurySwapperBaseReactQuery<ArrayOfRouteResponseForEmpty, TData> {
  args: {
    limit?: number
    startAfter?: string[][]
  }
}
export function useFurySwapperBaseRoutesQuery<TData = ArrayOfRouteResponseForEmpty>({
  client,
  args,
  options,
}: FurySwapperBaseRoutesQuery<TData>) {
  return useQuery<ArrayOfRouteResponseForEmpty, Error, TData>(
    furySwapperBaseQueryKeys.routes(client?.contractAddress, args),
    () =>
      client
        ? client.routes({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperBaseRouteQuery<TData>
  extends FurySwapperBaseReactQuery<RouteResponseForEmpty, TData> {
  args: {
    denomIn: string
    denomOut: string
  }
}
export function useFurySwapperBaseRouteQuery<TData = RouteResponseForEmpty>({
  client,
  args,
  options,
}: FurySwapperBaseRouteQuery<TData>) {
  return useQuery<RouteResponseForEmpty, Error, TData>(
    furySwapperBaseQueryKeys.route(client?.contractAddress, args),
    () =>
      client
        ? client.route({
            denomIn: args.denomIn,
            denomOut: args.denomOut,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperBaseOwnerQuery<TData>
  extends FurySwapperBaseReactQuery<OwnerResponse, TData> {}
export function useFurySwapperBaseOwnerQuery<TData = OwnerResponse>({
  client,
  options,
}: FurySwapperBaseOwnerQuery<TData>) {
  return useQuery<OwnerResponse, Error, TData>(
    furySwapperBaseQueryKeys.owner(client?.contractAddress),
    () => (client ? client.owner() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperBaseTransferResultMutation {
  client: FurySwapperBaseClient
  msg: {
    denomIn: string
    denomOut: string
    recipient: Addr
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperBaseTransferResultMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperBaseTransferResultMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperBaseTransferResultMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.transferResult(msg, fee, memo, funds),
    options,
  )
}
export interface FurySwapperBaseSwapExactInMutation {
  client: FurySwapperBaseClient
  msg: {
    coinIn: Coin
    denomOut: string
    slippage: Decimal
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperBaseSwapExactInMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperBaseSwapExactInMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperBaseSwapExactInMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.swapExactIn(msg, fee, memo, funds),
    options,
  )
}
export interface FurySwapperBaseSetRouteMutation {
  client: FurySwapperBaseClient
  msg: {
    denomIn: string
    denomOut: string
    route: Empty
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperBaseSetRouteMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperBaseSetRouteMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperBaseSetRouteMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setRoute(msg, fee, memo, funds),
    options,
  )
}
export interface FurySwapperBaseUpdateOwnerMutation {
  client: FurySwapperBaseClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperBaseUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperBaseUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperBaseUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
