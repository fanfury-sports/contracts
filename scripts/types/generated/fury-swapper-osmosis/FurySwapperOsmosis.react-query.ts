// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  OsmosisRoute,
  Uint128,
  Decimal,
  Addr,
  SwapAmountInRoute,
  Coin,
  QueryMsg,
  EstimateExactInSwapResponse,
  OwnerResponse,
  RouteResponseForEmpty,
  Empty,
  ArrayOfRouteResponseForEmpty,
} from './FurySwapperOsmosis.types'
import {
  FurySwapperOsmosisQueryClient,
  FurySwapperOsmosisClient,
} from './FurySwapperOsmosis.client'
export const furySwapperOsmosisQueryKeys = {
  contract: [
    {
      contract: 'furySwapperOsmosis',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furySwapperOsmosisQueryKeys.contract[0], address: contractAddress }] as const,
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furySwapperOsmosisQueryKeys.address(contractAddress)[0], method: 'owner', args },
    ] as const,
  route: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furySwapperOsmosisQueryKeys.address(contractAddress)[0], method: 'route', args },
    ] as const,
  routes: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furySwapperOsmosisQueryKeys.address(contractAddress)[0], method: 'routes', args },
    ] as const,
  estimateExactInSwap: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furySwapperOsmosisQueryKeys.address(contractAddress)[0],
        method: 'estimate_exact_in_swap',
        args,
      },
    ] as const,
}
export interface FurySwapperOsmosisReactQuery<TResponse, TData = TResponse> {
  client: FurySwapperOsmosisQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FurySwapperOsmosisEstimateExactInSwapQuery<TData>
  extends FurySwapperOsmosisReactQuery<EstimateExactInSwapResponse, TData> {
  args: {
    coinIn: Coin
    denomOut: string
  }
}
export function useFurySwapperOsmosisEstimateExactInSwapQuery<TData = EstimateExactInSwapResponse>({
  client,
  args,
  options,
}: FurySwapperOsmosisEstimateExactInSwapQuery<TData>) {
  return useQuery<EstimateExactInSwapResponse, Error, TData>(
    furySwapperOsmosisQueryKeys.estimateExactInSwap(client?.contractAddress, args),
    () =>
      client
        ? client.estimateExactInSwap({
            coinIn: args.coinIn,
            denomOut: args.denomOut,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperOsmosisRoutesQuery<TData>
  extends FurySwapperOsmosisReactQuery<ArrayOfRouteResponseForEmpty, TData> {
  args: {
    limit?: number
    startAfter?: string[][]
  }
}
export function useFurySwapperOsmosisRoutesQuery<TData = ArrayOfRouteResponseForEmpty>({
  client,
  args,
  options,
}: FurySwapperOsmosisRoutesQuery<TData>) {
  return useQuery<ArrayOfRouteResponseForEmpty, Error, TData>(
    furySwapperOsmosisQueryKeys.routes(client?.contractAddress, args),
    () =>
      client
        ? client.routes({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperOsmosisRouteQuery<TData>
  extends FurySwapperOsmosisReactQuery<RouteResponseForEmpty, TData> {
  args: {
    denomIn: string
    denomOut: string
  }
}
export function useFurySwapperOsmosisRouteQuery<TData = RouteResponseForEmpty>({
  client,
  args,
  options,
}: FurySwapperOsmosisRouteQuery<TData>) {
  return useQuery<RouteResponseForEmpty, Error, TData>(
    furySwapperOsmosisQueryKeys.route(client?.contractAddress, args),
    () =>
      client
        ? client.route({
            denomIn: args.denomIn,
            denomOut: args.denomOut,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperOsmosisOwnerQuery<TData>
  extends FurySwapperOsmosisReactQuery<OwnerResponse, TData> {}
export function useFurySwapperOsmosisOwnerQuery<TData = OwnerResponse>({
  client,
  options,
}: FurySwapperOsmosisOwnerQuery<TData>) {
  return useQuery<OwnerResponse, Error, TData>(
    furySwapperOsmosisQueryKeys.owner(client?.contractAddress),
    () => (client ? client.owner() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FurySwapperOsmosisTransferResultMutation {
  client: FurySwapperOsmosisClient
  msg: {
    denomIn: string
    denomOut: string
    recipient: Addr
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperOsmosisTransferResultMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperOsmosisTransferResultMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperOsmosisTransferResultMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.transferResult(msg, fee, memo, funds),
    options,
  )
}
export interface FurySwapperOsmosisSwapExactInMutation {
  client: FurySwapperOsmosisClient
  msg: {
    coinIn: Coin
    denomOut: string
    slippage: Decimal
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperOsmosisSwapExactInMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperOsmosisSwapExactInMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperOsmosisSwapExactInMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.swapExactIn(msg, fee, memo, funds),
    options,
  )
}
export interface FurySwapperOsmosisSetRouteMutation {
  client: FurySwapperOsmosisClient
  msg: {
    denomIn: string
    denomOut: string
    route: OsmosisRoute
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperOsmosisSetRouteMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperOsmosisSetRouteMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperOsmosisSetRouteMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setRoute(msg, fee, memo, funds),
    options,
  )
}
export interface FurySwapperOsmosisUpdateOwnerMutation {
  client: FurySwapperOsmosisClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFurySwapperOsmosisUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FurySwapperOsmosisUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FurySwapperOsmosisUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
