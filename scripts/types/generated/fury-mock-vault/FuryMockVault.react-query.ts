// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Duration,
  OracleBaseForString,
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  ExtensionExecuteMsg,
  LockupExecuteMsg,
  ForceUnlockExecuteMsg,
  QueryMsg,
  ExtensionQueryMsg,
  LockupQueryMsg,
  VaultInfoResponse,
  Empty,
  VaultStandardInfoResponse,
} from './FuryMockVault.types'
import { FuryMockVaultQueryClient, FuryMockVaultClient } from './FuryMockVault.client'
export const furyMockVaultQueryKeys = {
  contract: [
    {
      contract: 'furyMockVault',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furyMockVaultQueryKeys.contract[0], address: contractAddress }] as const,
  vaultStandardInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyMockVaultQueryKeys.address(contractAddress)[0],
        method: 'vault_standard_info',
        args,
      },
    ] as const,
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'info', args }] as const,
  previewDeposit: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'preview_deposit', args },
    ] as const,
  previewRedeem: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'preview_redeem', args },
    ] as const,
  totalAssets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'total_assets', args },
    ] as const,
  totalVaultTokenSupply: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyMockVaultQueryKeys.address(contractAddress)[0],
        method: 'total_vault_token_supply',
        args,
      },
    ] as const,
  convertToShares: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'convert_to_shares', args },
    ] as const,
  convertToAssets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'convert_to_assets', args },
    ] as const,
  vaultExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyMockVaultQueryKeys.address(contractAddress)[0], method: 'vault_extension', args },
    ] as const,
}
export interface FuryMockVaultReactQuery<TResponse, TData = TResponse> {
  client: FuryMockVaultQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FuryMockVaultVaultExtensionQuery<TData>
  extends FuryMockVaultReactQuery<Empty, TData> {}
export function useFuryMockVaultVaultExtensionQuery<TData = Empty>({
  client,
  options,
}: FuryMockVaultVaultExtensionQuery<TData>) {
  return useQuery<Empty, Error, TData>(
    furyMockVaultQueryKeys.vaultExtension(client?.contractAddress),
    () => (client ? client.vaultExtension() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultConvertToAssetsQuery<TData>
  extends FuryMockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useFuryMockVaultConvertToAssetsQuery<TData = Uint128>({
  client,
  args,
  options,
}: FuryMockVaultConvertToAssetsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyMockVaultQueryKeys.convertToAssets(client?.contractAddress, args),
    () =>
      client
        ? client.convertToAssets({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultConvertToSharesQuery<TData>
  extends FuryMockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useFuryMockVaultConvertToSharesQuery<TData = Uint128>({
  client,
  args,
  options,
}: FuryMockVaultConvertToSharesQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyMockVaultQueryKeys.convertToShares(client?.contractAddress, args),
    () =>
      client
        ? client.convertToShares({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultTotalVaultTokenSupplyQuery<TData>
  extends FuryMockVaultReactQuery<Uint128, TData> {}
export function useFuryMockVaultTotalVaultTokenSupplyQuery<TData = Uint128>({
  client,
  options,
}: FuryMockVaultTotalVaultTokenSupplyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyMockVaultQueryKeys.totalVaultTokenSupply(client?.contractAddress),
    () => (client ? client.totalVaultTokenSupply() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultTotalAssetsQuery<TData>
  extends FuryMockVaultReactQuery<Uint128, TData> {}
export function useFuryMockVaultTotalAssetsQuery<TData = Uint128>({
  client,
  options,
}: FuryMockVaultTotalAssetsQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyMockVaultQueryKeys.totalAssets(client?.contractAddress),
    () => (client ? client.totalAssets() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultPreviewRedeemQuery<TData>
  extends FuryMockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useFuryMockVaultPreviewRedeemQuery<TData = Uint128>({
  client,
  args,
  options,
}: FuryMockVaultPreviewRedeemQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyMockVaultQueryKeys.previewRedeem(client?.contractAddress, args),
    () =>
      client
        ? client.previewRedeem({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultPreviewDepositQuery<TData>
  extends FuryMockVaultReactQuery<Uint128, TData> {
  args: {
    amount: Uint128
  }
}
export function useFuryMockVaultPreviewDepositQuery<TData = Uint128>({
  client,
  args,
  options,
}: FuryMockVaultPreviewDepositQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyMockVaultQueryKeys.previewDeposit(client?.contractAddress, args),
    () =>
      client
        ? client.previewDeposit({
            amount: args.amount,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultInfoQuery<TData>
  extends FuryMockVaultReactQuery<VaultInfoResponse, TData> {}
export function useFuryMockVaultInfoQuery<TData = VaultInfoResponse>({
  client,
  options,
}: FuryMockVaultInfoQuery<TData>) {
  return useQuery<VaultInfoResponse, Error, TData>(
    furyMockVaultQueryKeys.info(client?.contractAddress),
    () => (client ? client.info() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultVaultStandardInfoQuery<TData>
  extends FuryMockVaultReactQuery<VaultStandardInfoResponse, TData> {}
export function useFuryMockVaultVaultStandardInfoQuery<TData = VaultStandardInfoResponse>({
  client,
  options,
}: FuryMockVaultVaultStandardInfoQuery<TData>) {
  return useQuery<VaultStandardInfoResponse, Error, TData>(
    furyMockVaultQueryKeys.vaultStandardInfo(client?.contractAddress),
    () => (client ? client.vaultStandardInfo() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryMockVaultVaultExtensionMutation {
  client: FuryMockVaultClient
  msg: ExtensionExecuteMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryMockVaultVaultExtensionMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryMockVaultVaultExtensionMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryMockVaultVaultExtensionMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.vaultExtension(msg, fee, memo, funds),
    options,
  )
}
export interface FuryMockVaultRedeemMutation {
  client: FuryMockVaultClient
  msg: {
    amount: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryMockVaultRedeemMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryMockVaultRedeemMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryMockVaultRedeemMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.redeem(msg, fee, memo, funds),
    options,
  )
}
export interface FuryMockVaultDepositMutation {
  client: FuryMockVaultClient
  msg: {
    amount: Uint128
    recipient?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryMockVaultDepositMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryMockVaultDepositMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryMockVaultDepositMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.deposit(msg, fee, memo, funds),
    options,
  )
}
