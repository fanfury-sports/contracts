// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  Decimal,
  InstantiateMsg,
  ExecuteMsg,
  OwnerUpdate,
  AssetParamsUpdate,
  HlsAssetTypeForString,
  Uint128,
  VaultConfigUpdate,
  EmergencyUpdate,
  CmEmergencyUpdate,
  RedBankEmergencyUpdate,
  AssetParamsBaseForString,
  CmSettingsForString,
  HlsParamsBaseForString,
  LiquidationBonus,
  RedBankSettings,
  VaultConfigBaseForString,
  Coin,
  QueryMsg,
  HlsAssetTypeForAddr,
  Addr,
  ArrayOfAssetParamsBaseForAddr,
  AssetParamsBaseForAddr,
  CmSettingsForAddr,
  HlsParamsBaseForAddr,
  ArrayOfVaultConfigBaseForAddr,
  VaultConfigBaseForAddr,
  ConfigResponse,
  OwnerResponse,
  TotalDepositResponse,
} from './FuryParams.types'
import { FuryParamsQueryClient, FuryParamsClient } from './FuryParams.client'
export const furyParamsQueryKeys = {
  contract: [
    {
      contract: 'furyParams',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furyParamsQueryKeys.contract[0], address: contractAddress }] as const,
  owner: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyParamsQueryKeys.address(contractAddress)[0], method: 'owner', args }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyParamsQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  assetParams: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyParamsQueryKeys.address(contractAddress)[0], method: 'asset_params', args }] as const,
  allAssetParams: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyParamsQueryKeys.address(contractAddress)[0], method: 'all_asset_params', args },
    ] as const,
  vaultConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...furyParamsQueryKeys.address(contractAddress)[0], method: 'vault_config', args }] as const,
  allVaultConfigs: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyParamsQueryKeys.address(contractAddress)[0], method: 'all_vault_configs', args },
    ] as const,
  targetHealthFactor: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyParamsQueryKeys.address(contractAddress)[0], method: 'target_health_factor', args },
    ] as const,
  totalDeposit: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyParamsQueryKeys.address(contractAddress)[0], method: 'total_deposit', args },
    ] as const,
}
export interface FuryParamsReactQuery<TResponse, TData = TResponse> {
  client: FuryParamsQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FuryParamsTotalDepositQuery<TData>
  extends FuryParamsReactQuery<TotalDepositResponse, TData> {
  args: {
    denom: string
  }
}
export function useFuryParamsTotalDepositQuery<TData = TotalDepositResponse>({
  client,
  args,
  options,
}: FuryParamsTotalDepositQuery<TData>) {
  return useQuery<TotalDepositResponse, Error, TData>(
    furyParamsQueryKeys.totalDeposit(client?.contractAddress, args),
    () =>
      client
        ? client.totalDeposit({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsTargetHealthFactorQuery<TData>
  extends FuryParamsReactQuery<Decimal, TData> {}
export function useFuryParamsTargetHealthFactorQuery<TData = Decimal>({
  client,
  options,
}: FuryParamsTargetHealthFactorQuery<TData>) {
  return useQuery<Decimal, Error, TData>(
    furyParamsQueryKeys.targetHealthFactor(client?.contractAddress),
    () => (client ? client.targetHealthFactor() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsAllVaultConfigsQuery<TData>
  extends FuryParamsReactQuery<ArrayOfVaultConfigBaseForAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useFuryParamsAllVaultConfigsQuery<TData = ArrayOfVaultConfigBaseForAddr>({
  client,
  args,
  options,
}: FuryParamsAllVaultConfigsQuery<TData>) {
  return useQuery<ArrayOfVaultConfigBaseForAddr, Error, TData>(
    furyParamsQueryKeys.allVaultConfigs(client?.contractAddress, args),
    () =>
      client
        ? client.allVaultConfigs({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsVaultConfigQuery<TData>
  extends FuryParamsReactQuery<VaultConfigBaseForAddr, TData> {
  args: {
    address: string
  }
}
export function useFuryParamsVaultConfigQuery<TData = VaultConfigBaseForAddr>({
  client,
  args,
  options,
}: FuryParamsVaultConfigQuery<TData>) {
  return useQuery<VaultConfigBaseForAddr, Error, TData>(
    furyParamsQueryKeys.vaultConfig(client?.contractAddress, args),
    () =>
      client
        ? client.vaultConfig({
            address: args.address,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsAllAssetParamsQuery<TData>
  extends FuryParamsReactQuery<ArrayOfAssetParamsBaseForAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useFuryParamsAllAssetParamsQuery<TData = ArrayOfAssetParamsBaseForAddr>({
  client,
  args,
  options,
}: FuryParamsAllAssetParamsQuery<TData>) {
  return useQuery<ArrayOfAssetParamsBaseForAddr, Error, TData>(
    furyParamsQueryKeys.allAssetParams(client?.contractAddress, args),
    () =>
      client
        ? client.allAssetParams({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsAssetParamsQuery<TData>
  extends FuryParamsReactQuery<AssetParamsBaseForAddr, TData> {
  args: {
    denom: string
  }
}
export function useFuryParamsAssetParamsQuery<TData = AssetParamsBaseForAddr>({
  client,
  args,
  options,
}: FuryParamsAssetParamsQuery<TData>) {
  return useQuery<AssetParamsBaseForAddr, Error, TData>(
    furyParamsQueryKeys.assetParams(client?.contractAddress, args),
    () =>
      client
        ? client.assetParams({
            denom: args.denom,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsConfigQuery<TData> extends FuryParamsReactQuery<ConfigResponse, TData> {}
export function useFuryParamsConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: FuryParamsConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    furyParamsQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsOwnerQuery<TData> extends FuryParamsReactQuery<OwnerResponse, TData> {}
export function useFuryParamsOwnerQuery<TData = OwnerResponse>({
  client,
  options,
}: FuryParamsOwnerQuery<TData>) {
  return useQuery<OwnerResponse, Error, TData>(
    furyParamsQueryKeys.owner(client?.contractAddress),
    () => (client ? client.owner() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryParamsEmergencyUpdateMutation {
  client: FuryParamsClient
  msg: EmergencyUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryParamsEmergencyUpdateMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryParamsEmergencyUpdateMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryParamsEmergencyUpdateMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.emergencyUpdate(msg, fee, memo, funds),
    options,
  )
}
export interface FuryParamsUpdateVaultConfigMutation {
  client: FuryParamsClient
  msg: VaultConfigUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryParamsUpdateVaultConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryParamsUpdateVaultConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryParamsUpdateVaultConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateVaultConfig(msg, fee, memo, funds),
    options,
  )
}
export interface FuryParamsUpdateAssetParamsMutation {
  client: FuryParamsClient
  msg: AssetParamsUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryParamsUpdateAssetParamsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryParamsUpdateAssetParamsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryParamsUpdateAssetParamsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAssetParams(msg, fee, memo, funds),
    options,
  )
}
export interface FuryParamsUpdateTargetHealthFactorMutation {
  client: FuryParamsClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryParamsUpdateTargetHealthFactorMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryParamsUpdateTargetHealthFactorMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryParamsUpdateTargetHealthFactorMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateTargetHealthFactor(msg, fee, memo, funds),
    options,
  )
}
export interface FuryParamsUpdateConfigMutation {
  client: FuryParamsClient
  msg: {
    addressProvider?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryParamsUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryParamsUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryParamsUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface FuryParamsUpdateOwnerMutation {
  client: FuryParamsClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryParamsUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryParamsUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryParamsUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
