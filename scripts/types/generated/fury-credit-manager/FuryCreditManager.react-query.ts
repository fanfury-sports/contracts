// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  HealthContractBaseForString,
  IncentivesUnchecked,
  Decimal,
  Uint128,
  OracleBaseForString,
  ParamsBaseForString,
  RedBankUnchecked,
  SwapperBaseForString,
  ZapperBaseForString,
  InstantiateMsg,
  ExecuteMsg,
  AccountKind,
  Action,
  ActionAmount,
  LiquidateRequestForVaultBaseForString,
  VaultPositionType,
  AccountNftBaseForString,
  OwnerUpdate,
  Action2,
  Expiration,
  Timestamp,
  Uint64,
  CallbackMsg,
  Addr,
  HealthState,
  LiquidateRequestForVaultBaseForAddr,
  ChangeExpected,
  Coin,
  ActionCoin,
  VaultBaseForString,
  ConfigUpdates,
  NftConfigUpdates,
  VaultBaseForAddr,
  QueryMsg,
  VaultPositionAmount,
  VaultAmount,
  VaultAmount1,
  UnlockingPositions,
  VaultPosition,
  LockingVaultAmount,
  VaultUnlockingPosition,
  ArrayOfAccount,
  Account,
  ArrayOfCoinBalanceResponseItem,
  CoinBalanceResponseItem,
  ArrayOfSharesResponseItem,
  SharesResponseItem,
  ArrayOfDebtShares,
  DebtShares,
  ArrayOfVaultPositionResponseItem,
  VaultPositionResponseItem,
  ConfigResponse,
  OwnerResponse,
  RewardsCollector,
  ArrayOfCoin,
  Positions,
  DebtAmount,
  VaultPositionValue,
  CoinValue,
  VaultUtilizationResponse,
} from './FuryCreditManager.types'
import { FuryCreditManagerQueryClient, FuryCreditManagerClient } from './FuryCreditManager.client'
export const furyCreditManagerQueryKeys = {
  contract: [
    {
      contract: 'furyCreditManager',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...furyCreditManagerQueryKeys.contract[0], address: contractAddress }] as const,
  accountKind: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyCreditManagerQueryKeys.address(contractAddress)[0], method: 'account_kind', args },
    ] as const,
  accounts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyCreditManagerQueryKeys.address(contractAddress)[0], method: 'accounts', args },
    ] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyCreditManagerQueryKeys.address(contractAddress)[0], method: 'config', args },
    ] as const,
  vaultUtilization: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'vault_utilization',
        args,
      },
    ] as const,
  positions: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...furyCreditManagerQueryKeys.address(contractAddress)[0], method: 'positions', args },
    ] as const,
  allCoinBalances: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'all_coin_balances',
        args,
      },
    ] as const,
  allDebtShares: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'all_debt_shares',
        args,
      },
    ] as const,
  totalDebtShares: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'total_debt_shares',
        args,
      },
    ] as const,
  allTotalDebtShares: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'all_total_debt_shares',
        args,
      },
    ] as const,
  allVaultPositions: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'all_vault_positions',
        args,
      },
    ] as const,
  estimateProvideLiquidity: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'estimate_provide_liquidity',
        args,
      },
    ] as const,
  estimateWithdrawLiquidity: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'estimate_withdraw_liquidity',
        args,
      },
    ] as const,
  vaultPositionValue: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...furyCreditManagerQueryKeys.address(contractAddress)[0],
        method: 'vault_position_value',
        args,
      },
    ] as const,
}
export interface FuryCreditManagerReactQuery<TResponse, TData = TResponse> {
  client: FuryCreditManagerQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface FuryCreditManagerVaultPositionValueQuery<TData>
  extends FuryCreditManagerReactQuery<VaultPositionValue, TData> {
  args: {
    vaultPosition: VaultPosition
  }
}
export function useFuryCreditManagerVaultPositionValueQuery<TData = VaultPositionValue>({
  client,
  args,
  options,
}: FuryCreditManagerVaultPositionValueQuery<TData>) {
  return useQuery<VaultPositionValue, Error, TData>(
    furyCreditManagerQueryKeys.vaultPositionValue(client?.contractAddress, args),
    () =>
      client
        ? client.vaultPositionValue({
            vaultPosition: args.vaultPosition,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerEstimateWithdrawLiquidityQuery<TData>
  extends FuryCreditManagerReactQuery<ArrayOfCoin, TData> {
  args: {
    lpToken: Coin
  }
}
export function useFuryCreditManagerEstimateWithdrawLiquidityQuery<TData = ArrayOfCoin>({
  client,
  args,
  options,
}: FuryCreditManagerEstimateWithdrawLiquidityQuery<TData>) {
  return useQuery<ArrayOfCoin, Error, TData>(
    furyCreditManagerQueryKeys.estimateWithdrawLiquidity(client?.contractAddress, args),
    () =>
      client
        ? client.estimateWithdrawLiquidity({
            lpToken: args.lpToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerEstimateProvideLiquidityQuery<TData>
  extends FuryCreditManagerReactQuery<Uint128, TData> {
  args: {
    coinsIn: Coin[]
    lpTokenOut: string
  }
}
export function useFuryCreditManagerEstimateProvideLiquidityQuery<TData = Uint128>({
  client,
  args,
  options,
}: FuryCreditManagerEstimateProvideLiquidityQuery<TData>) {
  return useQuery<Uint128, Error, TData>(
    furyCreditManagerQueryKeys.estimateProvideLiquidity(client?.contractAddress, args),
    () =>
      client
        ? client.estimateProvideLiquidity({
            coinsIn: args.coinsIn,
            lpTokenOut: args.lpTokenOut,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerAllVaultPositionsQuery<TData>
  extends FuryCreditManagerReactQuery<ArrayOfVaultPositionResponseItem, TData> {
  args: {
    limit?: number
    startAfter?: string[][]
  }
}
export function useFuryCreditManagerAllVaultPositionsQuery<
  TData = ArrayOfVaultPositionResponseItem,
>({ client, args, options }: FuryCreditManagerAllVaultPositionsQuery<TData>) {
  return useQuery<ArrayOfVaultPositionResponseItem, Error, TData>(
    furyCreditManagerQueryKeys.allVaultPositions(client?.contractAddress, args),
    () =>
      client
        ? client.allVaultPositions({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerAllTotalDebtSharesQuery<TData>
  extends FuryCreditManagerReactQuery<ArrayOfDebtShares, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useFuryCreditManagerAllTotalDebtSharesQuery<TData = ArrayOfDebtShares>({
  client,
  args,
  options,
}: FuryCreditManagerAllTotalDebtSharesQuery<TData>) {
  return useQuery<ArrayOfDebtShares, Error, TData>(
    furyCreditManagerQueryKeys.allTotalDebtShares(client?.contractAddress, args),
    () =>
      client
        ? client.allTotalDebtShares({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerTotalDebtSharesQuery<TData>
  extends FuryCreditManagerReactQuery<DebtShares, TData> {}
export function useFuryCreditManagerTotalDebtSharesQuery<TData = DebtShares>({
  client,
  options,
}: FuryCreditManagerTotalDebtSharesQuery<TData>) {
  return useQuery<DebtShares, Error, TData>(
    furyCreditManagerQueryKeys.totalDebtShares(client?.contractAddress),
    () => (client ? client.totalDebtShares() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerAllDebtSharesQuery<TData>
  extends FuryCreditManagerReactQuery<ArrayOfSharesResponseItem, TData> {
  args: {
    limit?: number
    startAfter?: string[][]
  }
}
export function useFuryCreditManagerAllDebtSharesQuery<TData = ArrayOfSharesResponseItem>({
  client,
  args,
  options,
}: FuryCreditManagerAllDebtSharesQuery<TData>) {
  return useQuery<ArrayOfSharesResponseItem, Error, TData>(
    furyCreditManagerQueryKeys.allDebtShares(client?.contractAddress, args),
    () =>
      client
        ? client.allDebtShares({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerAllCoinBalancesQuery<TData>
  extends FuryCreditManagerReactQuery<ArrayOfCoinBalanceResponseItem, TData> {
  args: {
    limit?: number
    startAfter?: string[][]
  }
}
export function useFuryCreditManagerAllCoinBalancesQuery<TData = ArrayOfCoinBalanceResponseItem>({
  client,
  args,
  options,
}: FuryCreditManagerAllCoinBalancesQuery<TData>) {
  return useQuery<ArrayOfCoinBalanceResponseItem, Error, TData>(
    furyCreditManagerQueryKeys.allCoinBalances(client?.contractAddress, args),
    () =>
      client
        ? client.allCoinBalances({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerPositionsQuery<TData>
  extends FuryCreditManagerReactQuery<Positions, TData> {
  args: {
    accountId: string
  }
}
export function useFuryCreditManagerPositionsQuery<TData = Positions>({
  client,
  args,
  options,
}: FuryCreditManagerPositionsQuery<TData>) {
  return useQuery<Positions, Error, TData>(
    furyCreditManagerQueryKeys.positions(client?.contractAddress, args),
    () =>
      client
        ? client.positions({
            accountId: args.accountId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerVaultUtilizationQuery<TData>
  extends FuryCreditManagerReactQuery<VaultUtilizationResponse, TData> {
  args: {
    vault: VaultBaseForString
  }
}
export function useFuryCreditManagerVaultUtilizationQuery<TData = VaultUtilizationResponse>({
  client,
  args,
  options,
}: FuryCreditManagerVaultUtilizationQuery<TData>) {
  return useQuery<VaultUtilizationResponse, Error, TData>(
    furyCreditManagerQueryKeys.vaultUtilization(client?.contractAddress, args),
    () =>
      client
        ? client.vaultUtilization({
            vault: args.vault,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerConfigQuery<TData>
  extends FuryCreditManagerReactQuery<ConfigResponse, TData> {}
export function useFuryCreditManagerConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: FuryCreditManagerConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    furyCreditManagerQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerAccountsQuery<TData>
  extends FuryCreditManagerReactQuery<ArrayOfAccount, TData> {
  args: {
    limit?: number
    owner: string
    startAfter?: string
  }
}
export function useFuryCreditManagerAccountsQuery<TData = ArrayOfAccount>({
  client,
  args,
  options,
}: FuryCreditManagerAccountsQuery<TData>) {
  return useQuery<ArrayOfAccount, Error, TData>(
    furyCreditManagerQueryKeys.accounts(client?.contractAddress, args),
    () =>
      client
        ? client.accounts({
            limit: args.limit,
            owner: args.owner,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerAccountKindQuery<TData>
  extends FuryCreditManagerReactQuery<AccountKind, TData> {
  args: {
    accountId: string
  }
}
export function useFuryCreditManagerAccountKindQuery<TData = AccountKind>({
  client,
  args,
  options,
}: FuryCreditManagerAccountKindQuery<TData>) {
  return useQuery<AccountKind, Error, TData>(
    furyCreditManagerQueryKeys.accountKind(client?.contractAddress, args),
    () =>
      client
        ? client.accountKind({
            accountId: args.accountId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  )
}
export interface FuryCreditManagerCallbackMutation {
  client: FuryCreditManagerClient
  msg: CallbackMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerCallbackMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerCallbackMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerCallbackMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.callback(msg, fee, memo, funds),
    options,
  )
}
export interface FuryCreditManagerUpdateNftConfigMutation {
  client: FuryCreditManagerClient
  msg: {
    config?: NftConfigUpdates
    ownership?: Action2
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerUpdateNftConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerUpdateNftConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerUpdateNftConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateNftConfig(msg, fee, memo, funds),
    options,
  )
}
export interface FuryCreditManagerUpdateOwnerMutation {
  client: FuryCreditManagerClient
  msg: OwnerUpdate
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerUpdateOwnerMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerUpdateOwnerMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerUpdateOwnerMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateOwner(msg, fee, memo, funds),
    options,
  )
}
export interface FuryCreditManagerUpdateConfigMutation {
  client: FuryCreditManagerClient
  msg: {
    updates: ConfigUpdates
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface FuryCreditManagerRepayFromWalletMutation {
  client: FuryCreditManagerClient
  msg: {
    accountId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerRepayFromWalletMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerRepayFromWalletMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerRepayFromWalletMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.repayFromWallet(msg, fee, memo, funds),
    options,
  )
}
export interface FuryCreditManagerUpdateCreditAccountMutation {
  client: FuryCreditManagerClient
  msg: {
    accountId: string
    actions: Action[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerUpdateCreditAccountMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerUpdateCreditAccountMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerUpdateCreditAccountMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateCreditAccount(msg, fee, memo, funds),
    options,
  )
}
export interface FuryCreditManagerCreateCreditAccountMutation {
  client: FuryCreditManagerClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useFuryCreditManagerCreateCreditAccountMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryCreditManagerCreateCreditAccountMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, FuryCreditManagerCreateCreditAccountMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createCreditAccount(msg, fee, memo, funds),
    options,
  )
}
